{"instruction": "What is Undefined in ECMAScript?", "output": "The Undefined type has exactly one value, called undefined. Any variable that has not been assigned a value has the value undefined."}
{"instruction": "What is Null in ECMAScript?", "output": "The Null type has exactly one value, called null."}
{"instruction": "What is Boolean in ECMAScript?", "output": "The Boolean type represents a logical entity having two values, called true and false."}
{"instruction": "What is String in ECMAScript?", "output": "The String type is the set of all ordered sequences of zero or more 16-bit unsigned integer values (“elements”) up to a maximum length of 253 - 1 elements. The String type is generally used to represent textual data in a running ECMAScript program, in which case each element in the String is treated as a UTF-16 code unit value. Each element is regarded as occupying a position within the sequence. These positions are indexed with non-negative integers. The first element (if any) is at index 0, the next element (if any) at index 1, and so on. The length of a String is the number of elements (i.e., 16-bit values) within it. The empty String has length zero and therefore contains no elements."}
{"instruction": "What is Symbol in ECMAScript?", "output": "The Symbol type is the set of all non-String values that may be used as the key of an Object property (6.1.7)."}
{"instruction": "What is Number in ECMAScript?", "output": "The Number type has exactly 18,437,736,874,454,810,627 (that is, 264 - 253 + 3) values, representing the double-precision 64-bit format IEEE 754-2019 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic, except that the 9,007,199,254,740,990 (that is, 253 - 2) distinct “Not-a-Number” values of the IEEE Standard are represented in ECMAScript as a single special NaN value. (Note that the NaN value is produced by the program expression NaN.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is implementation-defined; to ECMAScript code, all NaN values are indistinguishable from each other."}
{"instruction": "What is BigInt in ECMAScript?", "output": "The BigInt type represents an integer value. The value may be any size and is not limited to a particular bit-width. Generally, where not otherwise noted, operations are designed to return exact mathematically-based answers. For binary operations, BigInts act as two's complement binary strings, with negative numbers treated as having bits set infinitely to the left."}
{"instruction": "What is List in ECMAScript?", "output": "The List type is used to explain the evaluation of argument lists (see 13.3.8) in new expressions, in function calls, and in other algorithms where a simple ordered list of values is needed. Values of the List type are simply ordered sequences of list elements containing the individual values. These sequences may be of any length. The elements of a list may be randomly accessed using 0-origin indices. For notational convenience an array-like syntax can be used to access List elements. For example, arguments[2] is shorthand for saying the 3rd element of the List arguments."}
{"instruction": "What is Record in ECMAScript?", "output": "The Record type is used to describe data aggregations within the algorithms of this specification. A Record type value consists of one or more named fields. The value of each field is an ECMAScript language value or specification value. Field names are always enclosed in double brackets, for example [[Value]]."}
{"instruction": "What is Set in ECMAScript?", "output": "The Set type is used to explain a collection of unordered elements for use in the memory model. It is distinct from the ECMAScript collection type of the same name. To disambiguate, instances of the ECMAScript collection are consistently referred to as \"Set objects\" within this specification. Values of the Set type are simple collections of elements, where no element appears more than once. Elements may be added to and removed from Sets. Sets may be unioned, intersected, or subtracted from each other."}
{"instruction": "What is Relation in ECMAScript?", "output": "The Relation type is used to explain constraints on Sets. Values of the Relation type are Sets of ordered pairs of values from its value domain. For example, a Relation on events is a set of ordered pairs of events. For a Relation R and two values a and b in the value domain of R, a R b is shorthand for saying the ordered pair (a, b) is a member of R. A Relation is least with respect to some conditions when it is the smallest Relation that satisfies those conditions."}
{"instruction": "What is PrivateElement in ECMAScript?", "output": "The PrivateElement type is a Record used in the specification of private class fields, methods, and acces- sors. Although Property Descriptors are not used for private elements, private fields behave similarly to non- configurable, non-enumerable, writable data properties, private methods behave similarly to non-configurable, non-enumerable, non-writable data properties, and private accessors behave similarly to non-configurable, non- enumerable accessor properties."}
{"instruction": "What is ClassFieldDefinition in ECMAScript?", "output": "The ClassFieldDefinition type is a Record used in the specification of class fields."}
{"instruction": "What is BigInt in ECMAScript?", "output": "The BigInt type has no implicit conversions in the ECMAScript language; programmers must call BigInt explicitly to convert values from other types."}
{"instruction": "What is Job in ECMAScript?", "output": "A Job is an Abstract Closure with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress."}
{"instruction": "What is Array in ECMAScript?", "output": "An Array is an exotic object that gives special treatment to array index property keys (see 6.1.7). A property whose property name is an array index is also called an element. Every Array has a non-configurable \"length\" property whose value is always a non-negative integral Number whose mathematical value is strictly less than 232. The value of the \"length\" property is numerically greater than the name of every own property whose name is an array index; whenever an own property of an Array is created or changed, other properties are adjusted as necessary to maintain this invariant. Specifically, whenever an own property is added whose name is an array index, the value of the \"length\" property is changed, if necessary, to be one more than the numeric value of that array index; and whenever the value of the \"length\" property is changed, every own property whose name is an array index whose value is not smaller than the new length is deleted. This constraint applies only to own"}
{"instruction": "What is TypedArray in ECMAScript?", "output": "A TypedArray is an exotic object that performs special handling of integer index property keys."}
{"instruction": "What is Pattern in ECMAScript?", "output": "A Pattern is a BMP pattern if its associated flags contain neither a u nor a v. Otherwise, it is a Unicode pattern. A BMP pattern matches against a String interpreted as consisting of a sequence of 16-bit values that are Unicode code points in the range of the Basic Multilingual Plane. A Unicode pattern matches against a String interpreted as consisting of Unicode code points encoded using UTF-16. In the context of describing the behaviour of a BMP pattern “character” means a single 16-bit Unicode BMP code point. In the context of describing the behaviour of a Unicode pattern “character” means a UTF-16 encoded code point (6.1.4). In either context, “character value” means the numeric value of the corresponding non-encoded code point."}
{"instruction": "What is Atomics in ECMAScript?", "output": "The Atomics object provides functions that operate indivisibly (atomically) on shared memory array cells as well as functions that let agents wait for and dispatch primitive events. When used with discipline, the Atomics functions allow multi-agent programs that communicate through shared memory to execute in a well-understood order even on parallel CPUs. The rules that govern shared-memory communication are provided by the memory model, defined below."}
{"instruction": "What is WeakRef in ECMAScript?", "output": "A WeakRef is an object that is used to refer to a target object or symbol without preserving it from garbage collection. WeakRefs can be dereferenced to allow access to the target value, if the target hasn't been reclaimed by garbage collection."}
{"instruction": "What is FinalizationRegistry in ECMAScript?", "output": "A FinalizationRegistry is an object that manages registration and unregistration of cleanup operations that are performed when target objects and symbols are garbage collected."}
{"instruction": "What is Promise in ECMAScript?", "output": "A Promise is an object that is used as a placeholder for the eventual results of a deferred (and possibly asynchronous) computation."}
{"instruction": "What is Generator in ECMAScript?", "output": "A Generator is an instance of a generator function and conforms to both the Iterator and Iterable interfaces."}
{"instruction": "What is AsyncGenerator in ECMAScript?", "output": "An AsyncGenerator is an instance of an async generator function and conforms to both the AsyncIterator and AsyncIterable interfaces."}
{"instruction": "What is AsyncGeneratorRequest in ECMAScript?", "output": "An AsyncGeneratorRequest is a Record value used to store information about how an async generator should be resumed and contains capabilities for fulfilling or rejecting the corresponding promise."}
