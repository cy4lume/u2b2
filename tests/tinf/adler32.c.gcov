        -:    0:Source:adler32.c
        -:    1:/*
        -:    2: * Adler-32 checksum
        -:    3: *
        -:    4: * Copyright (c) 2003-2019 Joergen Ibsen
        -:    5: *
        -:    6: * This software is provided 'as-is', without any express or implied
        -:    7: * warranty. In no event will the authors be held liable for any damages
        -:    8: * arising from the use of this software.
        -:    9: *
        -:   10: * Permission is granted to anyone to use this software for any purpose,
        -:   11: * including commercial applications, and to alter it and redistribute it
        -:   12: * freely, subject to the following restrictions:
        -:   13: *
        -:   14: *   1. The origin of this software must not be misrepresented; you must
        -:   15: *      not claim that you wrote the original software. If you use this
        -:   16: *      software in a product, an acknowledgment in the product
        -:   17: *      documentation would be appreciated but is not required.
        -:   18: *
        -:   19: *   2. Altered source versions must be plainly marked as such, and must
        -:   20: *      not be misrepresented as being the original software.
        -:   21: *
        -:   22: *   3. This notice may not be removed or altered from any source
        -:   23: *      distribution.
        -:   24: */
        -:   25:
        -:   26:/*
        -:   27: * Adler-32 algorithm taken from the zlib source, which is
        -:   28: * Copyright (C) 1995-1998 Jean-loup Gailly and Mark Adler
        -:   29: */
        -:   30:
        -:   31:#include "tinf.h"
        -:   32:
        -:   33:#define A32_BASE 65521
        -:   34:#define A32_NMAX 5552
        -:   35:
    #####:   36:unsigned int tinf_adler32(const void *data, unsigned int length)
        -:   37:{
    #####:   38:	const unsigned char *buf = (const unsigned char *) data;
        -:   39:
    #####:   40:	unsigned int s1 = 1;
    #####:   41:	unsigned int s2 = 0;
        -:   42:
    #####:   43:	while (length > 0) {
    #####:   44:		int k = length < A32_NMAX ? length : A32_NMAX;
        -:   45:		int i;
        -:   46:
    #####:   47:		for (i = k / 16; i; --i, buf += 16) {
    #####:   48:			s1 += buf[0];
    #####:   49:			s2 += s1;
    #####:   50:			s1 += buf[1];
    #####:   51:			s2 += s1;
    #####:   52:			s1 += buf[2];
    #####:   53:			s2 += s1;
    #####:   54:			s1 += buf[3];
    #####:   55:			s2 += s1;
    #####:   56:			s1 += buf[4];
    #####:   57:			s2 += s1;
    #####:   58:			s1 += buf[5];
    #####:   59:			s2 += s1;
    #####:   60:			s1 += buf[6];
    #####:   61:			s2 += s1;
    #####:   62:			s1 += buf[7];
    #####:   63:			s2 += s1;
        -:   64:
    #####:   65:			s1 += buf[8];
    #####:   66:			s2 += s1;
    #####:   67:			s1 += buf[9];
    #####:   68:			s2 += s1;
    #####:   69:			s1 += buf[10];
    #####:   70:			s2 += s1;
    #####:   71:			s1 += buf[11];
    #####:   72:			s2 += s1;
    #####:   73:			s1 += buf[12];
    #####:   74:			s2 += s1;
    #####:   75:			s1 += buf[13];
    #####:   76:			s2 += s1;
    #####:   77:			s1 += buf[14];
    #####:   78:			s2 += s1;
    #####:   79:			s1 += buf[15];
    #####:   80:			s2 += s1;
        -:   81:		}
        -:   82:
    #####:   83:		for (i = k % 16; i; --i) {
    #####:   84:			s1 += *buf++;
    #####:   85:			s2 += s1;
        -:   86:		}
        -:   87:
    #####:   88:		s1 %= A32_BASE;
    #####:   89:		s2 %= A32_BASE;
        -:   90:
    #####:   91:		length -= k;
        -:   92:	}
        -:   93:
    #####:   94:	return (s2 << 16) | s1;
        -:   95:}
